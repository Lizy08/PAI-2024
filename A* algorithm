import math
import heapq

ROW, COL = 9, 10


DIRECTIONS = [(0, 1), (0, -1), (1, 0), (-1, 0),
              (1, 1), (1, -1), (-1, 1), (-1, -1)]


def is_valid(row, col):
    return 0 <= row < ROW and 0 <= col < COL


def calculate_h_value(row, col, dest):
    return math.sqrt((row - dest[0]) ** 2 + (col - dest[1]) ** 2)


def a_star_search(grid, src, dest):
    
    open_list = [(0, src[0], src[1])]
    heapq.heapify(open_list)
    closed_list = set()
    parent = {}

   
    while open_list:
        f, i, j = heapq.heappop(open_list)
        closed_list.add((i, j))

        
        if (i, j) == dest:
            path = []
            while (i, j) != src:
                path.append((i, j))
                i, j = parent[(i, j)]
            path.append(src)
            return path[::-1]

   
        for di, dj in DIRECTIONS:
            new_i, new_j = i + di, j + dj
            if is_valid(new_i, new_j) and grid[new_i][new_j] and (new_i, new_j) not in closed_list:
                g = f - calculate_h_value(i, j, dest) + 1
                h = calculate_h_value(new_i, new_j, dest)
                new_f = g + h
                heapq.heappush(open_list, (new_f, new_i, new_j))
                parent[(new_i, new_j)] = (i, j)

    return None


grid = [
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
    [0, 1, 1, 0, 1, 1, 0, 1, 0, 1],
    [0, 1, 1, 0, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 0, 0, 1]
]


src = (8, 0)
dest = (0, 1)

path = a_star_search(grid, src, dest)
if path:
    print("Path found:", path)
else:
    print("No path found.")
